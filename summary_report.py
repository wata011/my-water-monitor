#!/usr/bin/env python3
import os
import json
from datetime import datetime, timedelta
import pytz
import pandas as pd
import matplotlib.pyplot as plt
import requests
import matplotlib.dates as mdates # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü

# ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ
TZ = pytz.timezone('Asia/Bangkok')
LINE_TOKEN = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')
LINE_TARGET = os.getenv('LINE_TARGET_ID')

# Paths to your existing logs/state files
CHAOP_LOG    = 'historical_log.csv'      # from scraper.py
INBURI_LOG   = 'inburi_log.csv'          # new: timestamp, water_level
WEATHER_LOG  = 'weather_log.csv'         # new: timestamp,event_type,value

# ‚îÄ‚îÄ 1) Load & plot Chaop storage ‚îÄ‚îÄ
try:
    df_c = pd.read_csv(CHAOP_LOG, names=['ts','storage'], parse_dates=['ts'])
    df_c['storage'] = df_c['storage'].str.replace(r'\s*cms','',regex=True).astype(float)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠
    cutoff = datetime.now(TZ) - timedelta(days=7)
    sub = df_c[df_c['ts'] >= cutoff].copy() # ‡πÉ‡∏ä‡πâ .copy() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á SettingWithCopyWarning

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢
    plt.style.use('seaborn-v0_8-darkgrid') # ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå seaborn-darkgrid ‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏î‡∏µ
    plt.rcParams['font.family'] = 'sans-serif' # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå
    plt.rcParams['font.sans-serif'] = ['Arial', 'Tahoma', 'DejaVu Sans'] # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    plt.rcParams['axes.labelweight'] = 'bold' # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤

    plt.figure(figsize=(12, 7)) # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏™‡∏°‡∏™‡πà‡∏ß‡∏ô

    # ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∏‡∏î
    plt.plot(sub['ts'], sub['storage'], 
            marker='o', markersize=6, # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏∏‡∏î
            linestyle='-', linewidth=2.5, # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô
            color='#1f77b4', # ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° (matplotlib default blue)
            label='‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥') 

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (Trendline - Optional, ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    # z = np.polyfit(mdates.date2num(sub['ts']), sub['storage'], 1)
    # p = np.poly1d(z)
    # plt.plot(sub['ts'], p(mdates.date2num(sub['ts'])), color='red', linestyle='--', label='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°')

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏Å‡∏£‡∏≤‡∏ü (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    if not sub.empty:
        last_value_ts = sub['ts'].iloc[-1]
        last_value_storage = sub['storage'].iloc[-1]
        plt.annotate(f'{last_value_storage:.1f} cms', 
                    xy=(last_value_ts, last_value_storage), 
                    xytext=(5, 5), textcoords='offset points', 
                    ha='left', va='bottom', fontsize=10, color='darkgreen',
                    bbox=dict(boxstyle="round,pad=0.3", fc="yellow", ec="darkgreen", lw=0.5, alpha=0.7))


    plt.title('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤ (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô)', fontsize=18, color='white', pad=20) # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏î‡∏≥
    plt.xlabel('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', fontsize=14, color='white') # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
    plt.ylabel('‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥ (‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)', fontsize=14, color='white') # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m/%d %H:%M')) # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏ß‡∏±‡∏ô ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:‡∏ô‡∏≤‡∏ó‡∏µ
    plt.gca().xaxis.set_major_locator(mdates.DayLocator()) # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
    plt.gca().xaxis.set_minor_locator(mdates.HourLocator(interval=6)) # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    plt.xticks(rotation=45, ha='right', fontsize=12, color='white') # ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏â‡∏•‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    plt.yticks(fontsize=12, color='white') # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß

    plt.tick_params(axis='x', colors='white') # ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏µ‡∏î‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô X
    plt.tick_params(axis='y', colors='white') # ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏µ‡∏î‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô Y

    plt.legend(fontsize=12, loc='upper left') # ‡πÅ‡∏™‡∏î‡∏á Legend
    plt.tight_layout() # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
    plt.gca().set_facecolor('#2d2d2d') # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
    plt.gcf().set_facecolor('#1a1a1a') # ‡∏™‡∏µ‡∏î‡∏≥‡∏™‡∏ô‡∏¥‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    plt.savefig('chaop_summary.png', dpi=150, bbox_inches='tight') # ‡πÄ‡∏û‡∏¥‡πà‡∏° dpi ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    plt.close()
    last_chaop = sub.iloc[-1] if not sub.empty else None # ‡πÉ‡∏ä‡πâ sub ‡πÅ‡∏ó‡∏ô df_c ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö last_chaop

except FileNotFoundError:
    print(f"Error: {CHAOP_LOG} not found. Skipping Chaopraya data.")
    last_chaop = None
except Exception as e:
    print(f"Error processing {CHAOP_LOG}: {e}")
    last_chaop = None

# ‚îÄ‚îÄ 2) Latest readings ‚îÄ‚îÄ
try:
    df_i = pd.read_csv(INBURI_LOG, names=['ts','level'], parse_dates=['ts'])
    last_inb = df_i.iloc[-1]
except FileNotFoundError:
    print(f"Error: {INBURI_LOG} not found. Skipping Inburi data.")
    last_inb = None
except Exception as e:
    print(f"Error processing {INBURI_LOG}: {e}")
    last_inb = None

# ‚îÄ‚îÄ 3) Next weather event (if any) ‚îÄ‚îÄ
try:
    df_w = pd.read_csv(WEATHER_LOG, names=['ts','event','value'], parse_dates=['ts'])
    # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    now_utc = datetime.utcnow().replace(tzinfo=pytz.UTC)
    # ‡πÅ‡∏õ‡∏•‡∏á ts ‡πÉ‡∏ô df_w ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô UTC ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô TZ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    df_w['ts_utc'] = df_w['ts'].dt.tz_localize(TZ, errors='coerce').dt.tz_convert(pytz.UTC)
    upcoming = df_w[df_w['ts_utc'] > now_utc].copy() # ‡πÉ‡∏ä‡πâ .copy()

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    upcoming = upcoming.sort_values(by='ts_utc').reset_index(drop=True)

    next_evt = None
    if not upcoming.empty:
        # ‡πÉ‡∏ä‡πâ ts ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô timezone ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        next_evt_row = upcoming.iloc[0]
        next_evt = {
            'ts': next_evt_row['ts'], 
            'event': next_evt_row['event'], 
            'value': next_evt_row['value']
        }

except FileNotFoundError:
    print(f"Error: {WEATHER_LOG} not found. Skipping weather data.")
    next_evt = None
except Exception as e:
    print(f"Error processing {WEATHER_LOG}: {e}")
    next_evt = None

# ‚îÄ‚îÄ 4) Build message ‚îÄ‚îÄ
lines = [
    "üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô**",
    f"üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now(TZ).strftime('%d/%m/%Y')}",
    "",
]

if last_chaop is not None:
    lines.append(f"üåä ‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤: {last_chaop.storage:.1f}‚ÄØcms ‡∏ì {last_chaop.ts.strftime('%H:%M')}")
else:
    lines.append("üåä ‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

if last_inb is not None:
    lines.append(f"üèûÔ∏è ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: {last_inb.level:.2f}‚ÄØ‡∏°. ‡∏ì {last_inb.ts.strftime('%H:%M')}")
else:
    lines.append("üèûÔ∏è ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

if next_evt is not None:
    lines += [
        "",
        f"‚õÖ ‡∏ï‡πà‡∏≠‡πÑ‡∏õ: {next_evt['event']} at {next_evt['ts'].strftime('%H:%M')} (value: {next_evt['value']})"
    ]
else:
    lines.append("\n‚õÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏±‡∏ô‡πÉ‡∏Å‡∏•‡πâ")

text = "\n".join(lines)

# ‚îÄ‚îÄ 5) Push via LINE ‚îÄ‚îÄ
if not (LINE_TOKEN and LINE_TARGET):
    print("Error: LINE_TOKEN or LINE_TARGET not set. Skipping LINE notify.")
    exit()

push_url = 'https://api.line.me/v2/bot/message/push'
headers = {
    'Authorization': f"Bearer {LINE_TOKEN}",
    'Content-Type':  "application/json"
}
payload = {
    "to": LINE_TARGET,
    "messages": [
        {"type":"text", "text": text},
        {
          "type":"image",
          "originalContentUrl":"https://wata011.github.io/my-water-monitor/chaop_summary.png", # URL ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
          "previewImageUrl":"https://wata011.github.io/my-water-monitor/chaop_summary.png" # URL ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
        }
    ]
}
try:
    resp = requests.post(push_url, headers=headers, json=payload)
    resp.raise_for_status()
    print("Daily summary sent.")
except requests.exceptions.RequestException as e:
    print(f"Failed to send LINE message: {e}")
