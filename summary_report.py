#!/usr/bin/env python3
import os
import json
from datetime import datetime, timedelta
import pytz
import pandas as pd
import matplotlib.pyplot as plt
import requests
import matplotlib.dates as mdates

# ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ
TZ = pytz.timezone('Asia/Bangkok')
LINE_TOKEN = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')
LINE_TARGET = os.getenv('LINE_TARGET_ID')

# Paths to your existing logs/state files
CHAOP_LOG    = 'historical_log.csv'
INBURI_LOG   = 'inburi_log.csv'
WEATHER_LOG  = 'weather_log.csv'

# ‚îÄ‚îÄ 1) Load & plot Chaop storage ‚îÄ‚îÄ
try:
    df_c = pd.read_csv(CHAOP_LOG, names=['ts','storage'], parse_dates=['ts'])
    df_c['storage'] = df_c['storage'].str.replace(r'\s*cms','',regex=True).astype(float)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô
    cutoff = datetime.now(TZ) - timedelta(days=7)
    sub_chaop = df_c[df_c['ts'] >= cutoff].copy()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if sub_chaop.empty:
        print(f"WARN: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô {CHAOP_LOG} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        last_chaop = None
    else:
        last_chaop = sub_chaop.iloc[-1]

    # --- ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á UI ‡∏Å‡∏£‡∏≤‡∏ü ---
    plt.style.use('seaborn-v0_8-darkgrid') # ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå darkgrid ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢
    plt.rcParams['font.family'] = 'sans-serif'
    plt.rcParams['font.sans-serif'] = ['Tahoma', 'Arial Unicode MS', 'DejaVu Sans'] # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    plt.rcParams['axes.labelweight'] = 'bold'
    plt.rcParams['axes.titleweight'] = 'bold'
    plt.rcParams['text.color'] = 'white' # ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ö‡∏ô‡∏Å‡∏£‡∏≤‡∏ü (‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡∏ô, ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠)
    plt.rcParams['axes.labelcolor'] = 'white'
    plt.rcParams['xtick.color'] = 'white'
    plt.rcParams['ytick.color'] = 'white'
    plt.rcParams['grid.color'] = '#444444' # ‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î

    fig, ax = plt.subplots(figsize=(14, 8)) # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô

    # ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô
    ax.plot(sub_chaop['ts'], sub_chaop['storage'],
            marker='o', markersize=7,
            linestyle='-', linewidth=2.5,
            color='#87CEEB', # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏î‡πÉ‡∏™ (SkyBlue)
            label='‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥ (‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)')

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏Å‡∏£‡∏≤‡∏ü (‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
    if last_chaop is not None:
        ax.annotate(f'{last_chaop.storage:.1f} cms',
                    xy=(last_chaop.ts, last_chaop.storage),
                    xytext=(10, -10), textcoords='offset points',
                    ha='left', va='top', fontsize=12, color='#00FF7F', # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏î (SpringGreen)
                    bbox=dict(boxstyle="round,pad=0.4", fc="white", ec="#00FF7F", lw=1, alpha=0.9))

    ax.set_title('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤ (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô)', fontsize=20, color='white', pad=20)
    ax.set_xlabel('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤', fontsize=15, color='white')
    ax.set_ylabel('‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥ (‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)', fontsize=15, color='white')

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡∏ô X (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d %b %H:%M')) # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 19 ‡∏Å.‡∏Ñ. 10:30
    ax.xaxis.set_major_locator(mdates.DayLocator(interval=1)) # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
    ax.xaxis.set_minor_locator(mdates.HourLocator(interval=6)) # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    plt.xticks(rotation=45, ha='right', fontsize=12)

    # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡∏ô Y (‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥)
    ax.tick_params(axis='y', labelsize=12)

    ax.legend(fontsize=12, loc='upper left', frameon=True, facecolor='lightgray', edgecolor='white') # ‡∏õ‡∏£‡∏±‡∏ö Legend

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    fig.set_facecolor('#1a1a1a') # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á Figure
    ax.set_facecolor('#2d2d2d') # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≤‡∏ü

    plt.tight_layout()
    plt.savefig('chaop_summary.png', dpi=200, bbox_inches='tight') # ‡πÄ‡∏û‡∏¥‡πà‡∏° dpi ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å
    plt.close()

except FileNotFoundError:
    print(f"Error: {CHAOP_LOG} not found. Skipping Chaopraya data.")
    last_chaop = None
except Exception as e:
    print(f"Error processing {CHAOP_LOG}: {e}")
    last_chaop = None

# ‚îÄ‚îÄ 2) Latest readings for Inburi ‚îÄ‚îÄ
# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ (‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤ format ‡πÉ‡∏ô log file ‡πÄ‡∏õ‡πá‡∏ô ts,water_level,bank_level,status,below_bank,time)
try:
    df_i = pd.read_csv(INBURI_LOG, names=['ts','water_level','bank_level','status','below_bank','time'], parse_dates=['ts'])
    last_inb_data = df_i.iloc[-1] if not df_i.empty else None
except FileNotFoundError:
    print(f"Error: {INBURI_LOG} not found. Skipping Inburi data.")
    last_inb_data = None
except Exception as e:
    print(f"Error processing {INBURI_LOG}: {e}")
    last_inb_data = None

# ‚îÄ‚îÄ 3) Next weather event (if any) ‚îÄ‚îÄ
try:
    df_w = pd.read_csv(WEATHER_LOG, names=['ts','event','value'], parse_dates=['ts'])
    now_utc = datetime.utcnow().replace(tzinfo=pytz.UTC)
    df_w['ts_utc'] = df_w['ts'].dt.tz_localize(TZ, errors='coerce').dt.tz_convert(pytz.UTC)
    upcoming = df_w[df_w['ts_utc'] > now_utc].copy()
    upcoming = upcoming.sort_values(by='ts_utc').reset_index(drop=True)

    next_evt = None
    if not upcoming.empty:
        next_evt_row = upcoming.iloc[0]
        next_evt = {
            'ts': next_evt_row['ts'], 
            'event': next_evt_row['event'], 
            'value': next_evt_row['value']
        }

except FileNotFoundError:
    print(f"Error: {WEATHER_LOG} not found. Skipping weather data.")
    next_evt = None
except Exception as e:
    print(f"Error processing {WEATHER_LOG}: {e}")
    next_evt = None

# ‚îÄ‚îÄ 4) Build message ‚îÄ‚îÄ
lines = [
    "üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô**",
    f"üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now(TZ).strftime('%d/%m/%Y')}",
    "",
]

if last_chaop is not None:
    lines.append(f"üåä ‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤: {last_chaop.storage:.1f}‚ÄØcms ‡∏ì {last_chaop.ts.strftime('%H:%M')}")
else:
    lines.append("üåä ‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤")

# ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
if last_inb_data is not None and isinstance(last_inb_data.get('water_level'), (int, float)):
    status_text = f" ({last_inb_data.get('status', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞')})" if last_inb_data.get('status') else ""
    lines.append(f"üèûÔ∏è ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥): {last_inb_data['water_level']:.2f}‚ÄØ‡∏°.{status_text} ‡∏ì {last_inb_data['time']}")
    if isinstance(last_inb_data.get('below_bank'), (int, float)):
         lines.append(f"  ‚îî ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏¥‡πà‡∏á: {last_inb_data['below_bank']:.2f}‚ÄØ‡∏°.")
else:
    lines.append("üèûÔ∏è ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥")

if next_evt is not None:
    lines += [
        "",
        f"‚õÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {next_evt['event']} ‡∏ó‡∏µ‡πà {next_evt['ts'].strftime('%H:%M')} (‡∏Ñ‡πà‡∏≤: {next_evt['value']})"
    ]
else:
    lines.append("\n‚õÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô 12 ‡∏ä‡∏°. ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤") # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

text = "\n".join(lines)

# ‚îÄ‚îÄ 5) Push via LINE ‚îÄ‚îÄ
if not (LINE_TOKEN and LINE_TARGET):
    print("Error: LINE_TOKEN/LINE_TARGET ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö! ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE.")
    exit()

push_url = 'https://api.line.me/v2/bot/message/push'
headers = {
    'Authorization': f"Bearer {LINE_TOKEN}",
    'Content-Type':  "application/json"
}
payload = {
    "to": LINE_TARGET,
    "messages": [
        {"type":"text", "text": text},
        {
          "type":"image",
          "originalContentUrl":"https://wata011.github.io/my-water-monitor/chaop_summary.png",
          "previewImageUrl":"https://wata011.github.io/my-water-monitor/chaop_summary.png"
        }
    ]
}
try:
    resp = requests.post(push_url, headers=headers, json=payload)
    resp.raise_for_status()
    print("Daily summary sent.")
except requests.exceptions.RequestException as e:
    print(f"Failed to send LINE message: {e}")
