#!/usr/bin/env python3
import os
import json
import requests
from datetime import datetime, timedelta
import pytz
import pandas as pd # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

# -------- CONFIGURATION --------
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
# LINE_TOKEN          = os.getenv("LINE_CHANNEL_ACCESS_TOKEN") # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
# LINE_TARGET         = os.getenv("LINE_TARGET_ID") # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
WEATHER_LOG_FILE    = "weather_log.csv"
DATA_FILE           = "weather_data.json"

# ENV FLAGS
DRY_RUN = os.getenv("DRY_RUN", "").lower() in ("1", "true")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
# ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Google Maps ‡∏´‡∏£‡∏∑‡∏≠ OpenWeatherMap API docs
LATITUDE  = 14.8966 # ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ
LONGITUDE = 100.3892 # ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timezone
TZ = pytz.timezone('Asia/Bangkok')


def send_line_message(msg: str):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å daily_summary.py ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    """
    print("[INFO] send_line_message ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô weather_forecaster.py")
    # if DRY_RUN:
    #     print("[DRY‚ÄëRUN] send_line_message would send:")
    #     print(msg)
    #     return

    # if not (LINE_TOKEN and LINE_TARGET):
    #     print("[ERROR] LINE_TOKEN/LINE_TARGET ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö!")
    #     return

    # url = "https://api.line.me/v2/bot/message/push"
    # headers = {
    #     "Authorization": f"Bearer {LINE_TOKEN}",
    #     "Content-Type":  "application/json"
    # }
    # payload = {
    #     "to": LINE_TARGET,
    #     "messages": [{"type": "text", "text": msg}]
    # }
    # resp = requests.post(url, headers=headers, json=payload, timeout=10)
    # if resp.status_code != 200:
    #     print(f"[ERROR] ‡∏™‡πà‡∏á LINE ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {resp.status_code} {resp.text}")


def fetch_weather_forecast():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® 5 ‡∏ß‡∏±‡∏ô / 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å OpenWeatherMap"""
    if not OPENWEATHER_API_KEY:
        print("[ERROR] OPENWEATHER_API_KEY ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤!")
        return None

    url = (
        f"http://api.openweathermap.org/data/2.5/forecast?"
        f"lat={LATITUDE}&lon={LONGITUDE}&appid={OPENWEATHER_API_KEY}&units=metric"
    )
    try:
        print(f"[DEBUG] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OpenWeatherMap: {url}")
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ: {e}")
        return None


def parse_weather_data(forecast_data):
    """Parse ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
    events = []
    if not forecast_data or "list" not in forecast_data:
        return events

    for item in forecast_data["list"]:
        dt_txt = item["dt_txt"] # ‡πÄ‡∏ß‡∏•‡∏≤ UTC
        dt_utc = datetime.strptime(dt_txt, "%Y-%m-%d %H:%M:%S").replace(tzinfo=pytz.utc)
        dt_local = dt_utc.astimezone(TZ) # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ù‡∏ô‡∏ï‡∏Å (rain) ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≤‡∏¢‡∏∏ (thunderstorm)
        weather_main = item["weather"][0]["main"].lower()
        weather_desc = item["weather"][0]["description"].lower()

        event_type = None
        event_value = None

        if "rain" in weather_main or "drizzle" in weather_main:
            event_type = "‡∏ù‡∏ô‡∏ï‡∏Å"
            event_value = item.get("rain", {}).get("3h", 0) # ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ù‡∏ô‡πÉ‡∏ô 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        elif "thunderstorm" in weather_main:
            event_type = "‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á"
            event_value = item.get("rain", {}).get("3h", 0)
        elif "clouds" in weather_main and "overcast clouds" in weather_desc:
            event_type = "‡πÄ‡∏°‡∏Ü‡∏Ñ‡∏£‡∏∂‡πâ‡∏°"
            event_value = item["clouds"]["all"] # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÄ‡∏°‡∏Ü
        elif "clear" in weather_main:
            event_type = "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™"
            event_value = item["clouds"]["all"] # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÄ‡∏°‡∏Ü (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0)

        if event_type:
            events.append({
                "timestamp": dt_local,
                "event_type": event_type,
                "value": event_value
            })
    return events


def main():
    print("=== ‡πÄ‡∏£‡∏¥‡πà‡∏° weather_forecaster ===")

    forecast_data = fetch_weather_forecast()
    if not forecast_data:
        print("[ERROR] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ, ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å N/A ‡∏•‡∏á log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ summary_report ‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô NaN
        TZ_TH = pytz.timezone('Asia/Bangkok')
        now_th = datetime.now(TZ_TH)
        with open(WEATHER_LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(f"{now_th.isoformat()},N/A,N/A\n")
        return

    events = parse_weather_data(forecast_data)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡∏á weather_log.csv ‡πÄ‡∏™‡∏°‡∏≠
    with open(WEATHER_LOG_FILE, 'a', encoding='utf-8') as f:
        for event in events:
            f.write(f"{event['timestamp'].isoformat()},{event['event_type']},{event['value']}\n")
    print(f"[INFO] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {WEATHER_LOG_FILE} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ({len(events)} ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå)")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    # last_alert_time = None
    # if os.path.exists(DATA_FILE):
    #     with open(DATA_FILE, "r", encoding="utf-8") as f:
    #         saved_data = json.load(f)
    #         if "last_alert_time" in saved_data:
    #             last_alert_time = datetime.fromisoformat(saved_data["last_alert_time"]).astimezone(TZ)

    # now_local = datetime.now(TZ)
    # alert_sent = False

    # for event in events:
    #     # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏±‡∏ô‡πÉ‡∏Å‡∏•‡πâ (‡πÄ‡∏ä‡πà‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)
    #     # ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    #     if event["timestamp"] > now_local and \
    #        (event["timestamp"] - now_local) <= timedelta(hours=24) and \
    #        (last_alert_time is None or event["timestamp"] > last_alert_time):
    #         
    #         msg = (
    #             f"üì¢ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {event['event_type']} "
    #             f"(‡∏Ñ‡πà‡∏≤: {event['value']})\n"
    #             f"üïí ‡πÄ‡∏ß‡∏•‡∏≤: {event['timestamp'].strftime('%d/%m/%Y %H:%M ‡∏ô.')}"
    #         )
    #         send_line_message(msg)
    #         alert_sent = True
    #         break # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏Ñ‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

    # if alert_sent:
    #     with open(DATA_FILE, "w", encoding="utf-8") as f:
    #         json.dump({"last_alert_time": events[0]["timestamp"].isoformat()}, f, ensure_ascii=False, indent=2)

    print("=== ‡∏à‡∏ö weather_forecaster ===")


if __name__ == "__main__":
    main()
